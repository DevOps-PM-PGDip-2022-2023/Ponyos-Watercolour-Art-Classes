# This is a basic workflow to help you get started with Actions.
name: CICD
# Controls when the action will run.
on:
  push:
    branches: ["main"]
# Triggers the workflow on push or pull request events but only for the main branch
# push:
#  branches: [ main ]
# Allows you to run this workflow manually from the Actions tab
#  workflow_dispatch: {}
#  push:
#    branches:
#      - 'feature/DeploymentTesting'
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  buildDev:
    runs-on: ubuntu-latest
    environment: development-build
    strategy:
      matrix:
        node-version: [14.x]
    env:
      VUE_APP_APIURL: ${{ secrets.VUE_APP_APIURL }}
      VUE_APP_COGNITO_USER_POOL_ID: ${{ secrets.VUE_APP_COGNITO_USER_POOL_ID }}
      VUE_APP_COGNITO_APP_CLIENT_ID: ${{ secrets.VUE_APP_COGNITO_APP_CLIENT_ID }}
    steps:
      - name: Step 1 - Checkout main branch fom GitHub
        uses: actions/checkout@v3
      - name: Step 2 - Choose Node.js version ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: client/package-lock.json
      - name: Step 3 - Build for development
        run: |
          cd client
          npm install
          npm run buildDevMode
          npm run lint
          cd ../server
          npm install
          cd ..
          npm install
          npm run unitTest
          npm run test
      - name: Step 4 - Upload Developement Artifact GitHub Action
        uses: actions/upload-artifact@v2
        with:
          name: pwa-dev-${{ github.run_number }}
          path: client/dist/

  buildProd:
    runs-on: ubuntu-latest
    needs: buildDev
    environment: production-build
    strategy:
      matrix:
        node-version: [14.x]
    env:
      VUE_APP_APIURL: ${{ secrets.VUE_APP_APIURL }}
      VUE_APP_COGNITO_USER_POOL_ID: ${{ secrets.VUE_APP_COGNITO_USER_POOL_ID }}
      VUE_APP_COGNITO_APP_CLIENT_ID: ${{ secrets.VUE_APP_COGNITO_APP_CLIENT_ID }}
    steps:
      - name: Step 1 - Checkout main branch fom GitHub
        uses: actions/checkout@v3
      - name: Step 2 - Choose Node.js version ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: client/package-lock.json
      - name: Step 3 - Build for production
        run: |
          cd client
          npm install
          npm run build
          npm run lint
          cd ../server
          npm install
          cd ..
          npm install
          npm run unitTest
          npm run test
      - name: Step 4 - Upload Production Artifact GitHub Action
        uses: actions/upload-artifact@v2
        with:
          name: pwa-prd-${{ github.run_number }}
          path: client/dist/

  deploydev:
    needs: buildProd
    runs-on: ubuntu-latest
    environment: development
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: "eu-west-1"
      S3_BUCKET_URL: ${{ vars.S3_BUCKET_URL }}
      ENVIRONMENT: ${{ vars.ENVIRONMENT }}
      COGNITO_USER_POOL_ID: ${{ vars.COGNITO_USER_POOL_ID }}
      COGNITO_APP_CLIENT_ID: ${{ vars.COGNITO_APP_CLIENT_ID }}
    steps:
      - uses: actions/checkout@v3
      # Output name of bucket from Environment Variable in Github
      - name: Write Bucket Name
        run: echo "${{ vars.UNIQUE_BUCKET_NAME }}"
      # Create S3 Bucket if it does not exist
      - name: Create S3 Bucket
        run: |
          aws s3api get-bucket-location --bucket ${{ vars.UNIQUE_BUCKET_NAME }} || aws s3 mb s3://${{ vars.UNIQUE_BUCKET_NAME }}
      - name: Set Static Hosting
        run: |
          aws s3 website s3://${{ vars.UNIQUE_BUCKET_NAME }} --index-document index.html

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: pwa-dev-${{ github.run_number }}
          path: dist

      - name: Deploy static site to S3 bucket
        run: aws s3 sync dist s3://${{ vars.UNIQUE_BUCKET_NAME }} --delete --acl public-read

      - name: Deploy Serverless App
        run: |
          cd server
          npm install
          npm run deploy

  test:
    needs: deploydev
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Install dependencies
        run: npm ci
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Run Playwright tests
        run: |
          cd Test-Automation
          npx playwright test Test/CreateAccount.spec.js --project=chromium
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
  
  k6_load_test:
    name: k6 Load Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Run local k6 test
        uses: grafana/k6-action@v0.2.0
        with:
          filename: Test/performance.js


  deployprod:
    needs: test
    runs-on: ubuntu-latest
    environment: production
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: "eu-west-1"
      S3_BUCKET_URL: ${{ vars.S3_BUCKET_URL }}
      ENVIRONMENT: ${{ vars.ENVIRONMENT }}
      COGNITO_USER_POOL_ID: ${{ vars.COGNITO_USER_POOL_ID }}
      COGNITO_APP_CLIENT_ID: ${{ vars.COGNITO_APP_CLIENT_ID }}
    steps:
      - uses: actions/checkout@v3
      # Output name of bucket from Environment Variable in Github
      - name: Write Bucket Name
        run: echo "${{ vars.UNIQUE_BUCKET_NAME }}"
      # Create S3 Bucket if it does not exist
      - name: Create S3 Bucket
        run: |
          aws s3api get-bucket-location --bucket ${{ vars.UNIQUE_BUCKET_NAME }} || aws s3 mb s3://${{ vars.UNIQUE_BUCKET_NAME }}
      - name: Set Static Hosting
        run: |
          aws s3 website s3://${{ vars.UNIQUE_BUCKET_NAME }} --index-document index.html

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: pwa-prd-${{ github.run_number }}
          path: dist

      - name: Deploy static site to S3 bucket
        run: aws s3 sync dist s3://${{ vars.UNIQUE_BUCKET_NAME }} --delete --acl public-read

      - name: Deploy Serverless App
        run: |
          cd server
          npm install
          npm run deploy